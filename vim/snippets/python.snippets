snippet utf8
	# -*- coding: utf-8 -*-

snippet import
	import os
	import sys

snippet future
	from __future__ import absolute_import
	from __future__ import division
	from __future__ import print_function

snippet REP
	for ${1:i} in xrange(${2:n}):
	    ${3}

snippet freopen
	#sys.stdin = file('${1:input.txt}', 'r')
	#sys.stdout = file('${2:output.txt}', 'w')
	rl = sys.stdin.readline

snippet testcase
	import unittest
	class Test${1:Example}(unittest.TestCase):
	    def test_hello(self):
	        self.assertFalse("Implement me!")

snippet class
	class ${1:ClassName}(${2:object}):

	    def __init__(self):
	        ${3:super($1, self).__init__()}
	        ${0}

	    def __repr__(self):
	        return str(self)

snippet super
	super(${1:ChildClass}, self).__init__(${2:args})
#
snippet init
	def __init__(self):
	    ${1:pass}
#
snippet repr
	def __repr__(self):
	    return ${1:str(self)}
#
snippet embed
	from IPython import embed; embed()  # XXX DEBUG

snippet pdb
	import pdb; pdb.set_trace()  # XXX DEBUG

snippet ipdb
	import ipdb; ipdb.set_trace()  # XXX DEBUG

snippet pudb
	import pudb; pudb.set_trace()  # XXX DEBUG

snippet argparse
	import argparse
	parser = argparse.ArgumentParser(description=__doc__)
	parser.add_argument('${1:-o}', ${2:'--outfile',} default=${3:None}, type=${4:str})
	args = parser.parse_args()

snippet main
	def main():
	    ${1:pass}

	if __name__ == '__main__':
	    main()
#
# Boilperlates
#
snippet PATH
	__PATH__ = os.path.abspath(os.path.dirname(__file__))
#
snippet jsondump
	json.dumps(${1:object}, sort_keys=True, indent=4, separators=(',', ': '))
#
# Common imports,
# ML, Data Science, Tensorflow, ...
#
snippet np
	import numpy as np

snippet osp
	import os.path as osp

snippet PIL
	from PIL import Image

snippet xrange
	from six.moves import xrange

snippet tf
	import tensorflow as tf
snippet tflayers
	import tensorflow.contrib.layers as layers
snippet tfslim
	import tensorflow.contrib.slim as slim

snippet tfsession
	session = tf.Session(config=tf.ConfigProto(
	    gpu_options=tf.GPUOptions(allow_growth=True),
	    device_count={'GPU': 1},
	))
snippet tfsaver
	saver = tf.train.Saver(max_to_keep=1000)
snippet tfprint
	${1:tensor} = tf.Print($1, data=[$1], first_n=${2:10})  # XXX DEBUG
snippet tfpdb
	# XXX DEBUG tf breakpoint {{{
	def _breakpoint_func(${2}):
	    import pudb; pudb.set_trace()
	    return False
	with tf.control_dependencies(tf.py_func(_breakpoint_func, [$2], [tf.bool]))
	    ${1:t} = tf.identity($1, name='debug_identity')
	# XXX DEBUG }}}
